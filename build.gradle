import org.gradle.internal.jvm.Jvm

import java.nio.file.Files

plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.6.0'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'org.panteleyev.jpackageplugin' version '1.3.1'
}

group 'org.myteer'
version '1.0.0'

sourceCompatibility = '16'
targetCompatibility = '16'
mainClassName = 'org.myteer.novel.main.MainKt'
applicationDefaultJvmArgs = [
        '-Dhttps.protocols=TLSv1.2,TLSv1.1,TLSv1',
        '--add-exports', 'javafx.base/com.sun.javafx=ALL-UNNAMED',
        '--add-exports', 'javafx.base/com.sun.javafx.runtime=ALL-UNNAMED',
        '--add-exports', 'javafx.controls/com.sun.javafx.scene.control.skin.resources=ALL-UNNAMED',
        '--add-exports', 'javafx.graphics/com.sun.javafx.application=ALL-UNNAMED',
        '--add-exports', 'javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED',
        '--add-exports', 'javafx.graphics/com.sun.javafx.scene.text=ALL-UNNAMED',
        '--add-exports', 'javafx.graphics/com.sun.javafx.text=ALL-UNNAMED',
        '--add-exports', 'javafx.graphics/com.sun.javafx.geom=ALL-UNNAMED',
        '--add-exports', 'javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
        '--add-opens', 'java.base/java.io=ALL-UNNAMED',
        '--add-opens', 'java.base/java.time=ALL-UNNAMED',
        '--add-opens', 'javafx.graphics/javafx.scene.text=ALL-UNNAMED',
        '--add-opens', 'javafx.graphics/com.sun.javafx.text=ALL-UNNAMED'
]

compileJava {
    options.encoding = 'UTF-8'
}

[compileKotlin, compileTestKotlin].forEach {
    it.kotlinOptions {
        jvmTarget = targetCompatibility
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    // kotlin
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.6.0'
    // logging
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'ch.qos.logback:logback-classic:1.2.7'
    // json
    implementation 'com.google.code.gson:gson:2.8.9'
    // database
    implementation 'org.dizitart:nitrite:3.4.3'
    // retry
    implementation 'com.github.rholder:guava-retrying:2.0.0'
    // cache
    implementation 'com.github.ben-manes.caffeine:caffeine:3.0.4'
    // icon
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.2.0'
    implementation 'org.kordamp.ikonli:ikonli-materialdesign2-pack:12.2.0'
    implementation 'org.kordamp.ikonli:ikonli-material2-pack:12.2.0'
    // Microsoft Documents
    implementation 'org.apache.poi:poi-ooxml:5.0.0'

    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'com.github.Dansoftowner:jFileGoodies:1.2.6'
    implementation 'com.github.Dansoftowner:jUserDirectories:1.0'
    implementation 'com.github.Dansoftowner:jSystemThemeDetector:3.7'
    implementation 'com.github.Dansoftowner:Restart4j:1.4.7'
    implementation 'com.github.oshi:oshi-core:5.8.3'
    implementation 'it.sauronsoftware:junique:1.0.4'

    implementation 'com.dlsc.workbenchfx:workbenchfx-core:11.1.0'
    implementation 'io.github.typhon0:AnimateFX:1.2.2'
    implementation('com.github.Dansoftowner:FXTaskbarProgressBar:v11.4') {
        exclude group: "org.openjfx"
    }
    implementation 'org.fxmisc.richtext:richtextfx:0.10.7'
    implementation('org.jfxtras:jmetro:11.6.15') {
        exclude group: "org.openjfx"
    }
    implementation 'com.jfoenix:jfoenix:9.0.10'
    implementation 'org.controlsfx:controlsfx:11.1.0'
    implementation "de.jangassen:nsmenufx:3.1.0"
}

shadowJar {
    exclude 'javafx/**'
    exclude 'javafx.properties'
    exclude 'javafx-swt.jar'
    exclude 'junit/**'
}

/* --------------------------------- Distribution ------------------------------------ */
def distributionDir = new File(projectDir, "distribution")
def distributionInputDir = new File(distributionDir, "input")
def distributionRuntimeDir = new File(distributionDir, "java-runtime")
def distributionTempDir = new File(distributionDir, "temp")
def distributionBuildDir = new File(distributionDir, "build")
def distributionIconDir = new File(distributionDir, "icon")
def distributionFileAssociationsDir = new File(distributionDir, "file-associations")

def jLinkExecutable = new File(Jvm.current().getJavaHome(), "bin/jlink")

task cleanDistributionInput(type: Delete) {
    doFirst {
        delete distributionInputDir
    }
    doLast {
        distributionInputDir.mkdir()
    }
}

task buildDistributionInput {
    dependsOn shadowJar
    dependsOn cleanDistributionInput
    doLast {
        Files.copy(
                tasks.shadowJar.archiveFile.get().asFile.toPath(),
                new File(distributionInputDir, tasks.shadowJar.archiveFileName.get()).toPath()
        )
    }
}

task cleanDistributionRuntime {
    doFirst {
        delete distributionRuntimeDir
    }
}

task buildDistributionRuntime(type: Exec) {
    dependsOn cleanDistributionRuntime
    workingDir = distributionDir.toString()
    executable = jLinkExecutable.toString()
    args = [
            '--output',
            distributionRuntimeDir,
            '--strip-debug',
            '--compress', '2',
            '--no-header-files',
            '--no-man-pages',
            '--add-modules',
            'java.se,javafx.base,javafx.controls,javafx.fxml,javafx.graphics,javafx.media,javafx.web'
    ]
}

task cleanDistributionTemp(type: Delete) {
    doFirst {
        delete distributionTempDir
    }
    doLast {
        distributionTempDir.mkdir()
    }
}

task cleanDistributionBuild(type: Delete) {
    doFirst {
        delete distributionBuildDir
    }
}

task preparteDistribution {
    dependsOn buildDistributionInput
    dependsOn buildDistributionRuntime
    dependsOn cleanDistributionTemp
    dependsOn cleanDistributionBuild
}

jpackage {
    dependsOn preparteDistribution

    appName = project.name
    appVersion = project.version
    vendor = 'MTSoftware'
    javaOptions = applicationDefaultJvmArgs

    input = distributionInputDir.toString()
    destination = distributionBuildDir.toString()
    temp = distributionTempDir.toString()
    mainJar = shadowJar.archiveFileName.get()
    runtimeImage = distributionRuntimeDir.toString()

    licenseFile = "LICENSE"

    winMenu = true
    winDirChooser = true
    winShortcut = true

    linuxDebMaintainer = "myteer@qq.com"
    linuxMenuGroup = project.name
    linuxShortcut = true

    windows {
        icon = "${distributionIconDir}/novel.ico"
        fileAssociations = ["${distributionFileAssociationsDir}/file-associations-win.properties"]
    }

    linux {
        icon = "${distributionIconDir}/novel.png"
        fileAssociations = ["${distributionFileAssociationsDir}/file-associations-linux.properties"]
    }

    mac {
        icon = "${distributionIconDir}/novel.icns"
        fileAssociations = ["${distributionFileAssociationsDir}/file-associations-mac.properties"]
    }
}

task cleanProject {
    dependsOn clean
    doLast {
        delete distributionInputDir
        delete distributionRuntimeDir
        delete distributionTempDir
        delete distributionBuildDir
    }
}